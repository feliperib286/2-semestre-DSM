-- Remove as tabelas se elas j√° existirem
DROP TABLE IF EXISTS alunos;
DROP TABLE IF EXISTS cursos;

-- Cria√ß√£o da tabela 'cursos'
CREATE TABLE cursos (
    id SERIAL PRIMARY KEY,  -- Coluna id como SERIAL (auto-incremento)
    nome VARCHAR(100) NOT NULL
);

-- Cria√ß√£o da tabela 'alunos'
CREATE TABLE alunos (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    curso_id INT,
    FOREIGN KEY (curso_id) REFERENCES cursos(id)
);

-- Inserir dados na tabela 'cursos'
INSERT INTO cursos (nome) VALUES
('Matem√°tica'),
('Hist√≥ria'),
('Ci√™ncias');

-- Inserir dados na tabela 'alunos'
INSERT INTO alunos (nome, curso_id) VALUES
('Jo√£o Silva', 1),       -- Jo√£o est√° matriculado em Matem√°tica (id 1)
('Maria Oliveira', 2),   -- Maria est√° matriculada em Hist√≥ria (id 2)
('Pedro Santos', NULL),  -- Pedro n√£o est√° matriculado em nenhum curso
('Ana Costa', 1),        -- Ana est√° matriculada em Matem√°tica (id 1)
('Carlos Mendes', NULL); -- Carlos n√£o est√° matriculado em nenhum curso

-- Consulta 1: Listar todos os alunos e seus cursos (INNER JOIN)
SELECT alunos.nome AS Aluno, cursos.nome AS Curso
FROM alunos
INNER JOIN cursos ON alunos.curso_id = cursos.id;

-- Consulta 2: Listar todos os alunos, incluindo os sem curso (LEFT JOIN)
SELECT alunos.nome AS Aluno, cursos.nome AS Curso
FROM alunos
LEFT JOIN cursos ON alunos.curso_id = cursos.id;

-- Consulta 3: Listar todos os cursos e os alunos matriculados (mesmo que n√£o haja alunos)
SELECT cursos.nome AS Curso, alunos.nome AS Aluno
FROM cursos
LEFT JOIN alunos ON cursos.id = alunos.curso_id;

-- Consulta 4: Listar alunos que n√£o est√£o matriculados em nenhum curso
SELECT alunos.nome AS Aluno
FROM alunos
WHERE curso_id IS NULL;

-- Consulta 5: Listar cursos que n√£o t√™m alunos matriculados
SELECT cursos.nome AS Curso
FROM cursos
LEFT JOIN alunos ON cursos.id = alunos.curso_id
WHERE alunos.id IS NULL;

-- Atualiza√ß√£o: Adicionar um novo curso e matricular um aluno
INSERT INTO cursos (nome) VALUES ('F√≠sica');  -- Adiciona o curso de F√≠sica
INSERT INTO alunos (nome, curso_id) VALUES ('Luiza Fernandes', 4);  -- Matricula Luiza em F√≠sica (id 4)

-- Consulta 6: Verificar os dados atualizados
SELECT alunos.nome AS Aluno, cursos.nome AS Curso
FROM alunos
LEFT JOIN cursos ON alunos.curso_id = cursos.id;

-- Exclus√£o: Remover um aluno e verificar o resultado
DELETE FROM alunos WHERE nome = 'Pedro Santos';  -- Remove Pedro Santos

-- Consulta 7: Verificar os dados ap√≥s a exclus√£o
SELECT alunos.nome AS Aluno, cursos.nome AS Curso
FROM alunos
LEFT JOIN cursos ON alunos.curso_id = cursos.id;

-----------------------------------------------------------------



-- 1Ô∏è‚É£ Remove as tabelas se elas j√° existirem
DROP TABLE IF EXISTS transacoes;
DROP TABLE IF EXISTS contas;
DROP TABLE IF EXISTS clientes;

-- 2Ô∏è‚É£ Cria√ß√£o da tabela 'clientes'
CREATE TABLE clientes (
    id_cliente SERIAL PRIMARY KEY,  -- ID √∫nico do cliente (chave prim√°ria)
    nome VARCHAR(100) NOT NULL,     -- Nome do cliente (obrigat√≥rio)
    cpf VARCHAR(11) UNIQUE NOT NULL, -- CPF do cliente (√∫nico e obrigat√≥rio)
    endereco TEXT,                  -- Endere√ßo do cliente (opcional)
    telefone VARCHAR(15)            -- Telefone do cliente (opcional)
);

-- 3Ô∏è‚É£ Inser√ß√£o de dados na tabela 'clientes'
INSERT INTO clientes (nome, cpf, endereco, telefone) VALUES
('Jo√£o Silva', '12345678900', 'Rua A, 123', '11999990000'),      -- Cliente 1
('Maria Oliveira', '98765432100', 'Rua B, 456', '11988887777');  -- Cliente 2

-- 4Ô∏è‚É£ Cria√ß√£o da tabela 'contas'
CREATE TABLE contas (
    id_conta SERIAL PRIMARY KEY,    -- ID √∫nico da conta (chave prim√°ria)
    numero_conta VARCHAR(10) UNIQUE NOT NULL, -- N√∫mero da conta (√∫nico e obrigat√≥rio)
    saldo DECIMAL(10,2) DEFAULT 0, -- Saldo da conta (padr√£o √© 0)
    id_cliente INT REFERENCES clientes(id_cliente) ON DELETE CASCADE -- Relacionamento com a tabela clientes
);

-- 5Ô∏è‚É£ Inser√ß√£o de dados na tabela 'contas'
INSERT INTO contas (numero_conta, saldo, id_cliente) VALUES
('000123', 1500.00, 1),  -- Conta 1: Jo√£o Silva
('000456', 2300.00, 2);  -- Conta 2: Maria Oliveira

-- 6Ô∏è‚É£ Cria√ß√£o da tabela 'transacoes'
CREATE TABLE transacoes (
    id_transacao SERIAL PRIMARY KEY, -- ID √∫nico da transa√ß√£o (chave prim√°ria)
    id_conta INT REFERENCES contas(id_conta) ON DELETE CASCADE, -- Relacionamento com a tabela contas
    tipo VARCHAR(15) CHECK (tipo IN ('Dep√≥sito', 'Saque', 'Transfer√™ncia')), -- Tipo de transa√ß√£o
    valor DECIMAL(10,2) NOT NULL CHECK (valor > 0), -- Valor da transa√ß√£o (deve ser positivo)
    data_transacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Data e hora da transa√ß√£o (padr√£o √© o momento da inser√ß√£o)
    destino_transferencia INT REFERENCES contas(id_conta) -- Conta de destino para transfer√™ncias
);

-- 7Ô∏è‚É£ Inser√ß√£o de dados na tabela 'transacoes'
INSERT INTO transacoes (id_conta, tipo, valor, destino_transferencia) VALUES
(1, 'Dep√≥sito', 500.00, NULL),      -- Dep√≥sito na conta 1
(2, 'Saque', 200.00, NULL),         -- Saque na conta 2
(1, 'Transfer√™ncia', 300.00, 2);    -- Transfer√™ncia da conta 1 para a conta 2

-- 8Ô∏è‚É£ Consultas b√°sicas no sistema banc√°rio

-- Listar todos os clientes cadastrados
SELECT * FROM clientes;

-- Listar todas as contas e seus respectivos clientes
SELECT contas.numero_conta, clientes.nome, contas.saldo
FROM contas
INNER JOIN clientes ON contas.id_cliente = clientes.id_cliente;

-- Listar todas as transa√ß√µes registradas
SELECT transacoes.tipo, transacoes.valor, transacoes.data_transacao,
       c1.numero_conta AS origem,
       c2.numero_conta AS destino
FROM transacoes
INNER JOIN contas c1 ON transacoes.id_conta = c1.id_conta
LEFT JOIN contas c2 ON transacoes.destino_transferencia = c2.id_conta;

-- 9Ô∏è‚É£ Atualiza√ß√µes e remo√ß√µes

-- Atualizar o saldo de uma conta (exemplo de um dep√≥sito)
UPDATE contas
SET saldo = saldo + 500.00
WHERE id_conta = 1;

-- Excluir um cliente e suas contas (ON DELETE CASCADE remove automaticamente as contas e transa√ß√µes associadas)
-- Exclui as transa√ß√µes que referenciam a conta como destino_transferencia
DELETE FROM transacoes WHERE destino_transferencia = 2;

-- Exclui as transa√ß√µes que referenciam a conta como id_conta
DELETE FROM transacoes WHERE id_conta = 2;

-- Agora voc√™ pode excluir a conta
DELETE FROM contas WHERE id_conta = 2;

-- Recria a tabela transacoes com ON DELETE CASCADE
DROP TABLE IF EXISTS transacoes;

CREATE TABLE transacoes (
    id_transacao SERIAL PRIMARY KEY,
    id_conta INT REFERENCES contas(id_conta) ON DELETE CASCADE,
    tipo VARCHAR(15) CHECK (tipo IN ('Dep√≥sito', 'Saque', 'Transfer√™ncia')),
    valor DECIMAL(10,2) NOT NULL CHECK (valor > 0),
    data_transacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    destino_transferencia INT REFERENCES contas(id_conta) ON DELETE CASCADE
);

-- üîü Atividade pr√°tica

-- 1Ô∏è‚É£ Insira um novo cliente no sistema
INSERT INTO clientes (nome, cpf, endereco, telefone) VALUES
('Carlos Souza', '99988877766', 'Rua C, 789', '11977776666');

-- 2Ô∏è‚É£ Crie uma conta para esse novo cliente
INSERT INTO contas (numero_conta, saldo, id_cliente) VALUES
('000789', 1000.00, 3);  -- Conta 3: Carlos Souza

-- 3Ô∏è‚É£ Realize uma transfer√™ncia de R$ 100,00 da conta 000123 para a conta 000789
INSERT INTO transacoes (id_conta, tipo, valor, destino_transferencia) VALUES
(1, 'Transfer√™ncia', 100.00, 3);  -- Transfer√™ncia da conta 1 para a conta 3

-- Atualizar os saldos das contas ap√≥s a transfer√™ncia
UPDATE contas
SET saldo = saldo - 100.00
WHERE id_conta = 1;  -- Deduz R$ 100,00 da conta de origem

UPDATE contas
SET saldo = saldo + 100.00
WHERE id_conta = 3;  -- Adiciona R$ 100,00 √† conta de destino

-- 4Ô∏è‚É£ Liste todas as contas do banco, mostrando os saldos atualizados
SELECT contas.numero_conta, clientes.nome, contas.saldo
FROM contas
INNER JOIN clientes ON contas.id_cliente = clientes.id_cliente;